@page "/signup"
@layout MinimalLayout
@inject NavigationManager NavigationManager
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject JwtAuthenticationStateProvider AuthProvider

@rendermode InteractiveAuto

@using System.ComponentModel.DataAnnotations
@using Gotorz.Components.Layout
@using Gotorz.Services
@using Gotorz.Models

<PageTitle>Sign Up</PageTitle>

@* Custom styling for the validation text *@
<style>

    .password-rules li {
        transition: all 0.3s ease;
        opacity: 0.6;
        transform: translateX(0);
    }

    .password-rules li.text-success {
        color: green;
        opacity: 1;
        transform: translateX(5px); /* subtle bounce */
    }

    .password-rules li.text-danger {
        color: red;
        opacity: 1;
        transform: translateX(0);
    }

</style>

<div class="d-flex flex-column min-vh-100 w-100">
    <!-- Top Section: Centered Return Link -->
    <div class="p-3 text-center w-100">
        <a href="/" class="fw-bold">⬅️ Return to homepage</a>
    </div>

    <!-- Middle Section: Centered Signup Box -->
    <div class="flex-grow-1 d-flex justify-content-center align-items-center w-100">
        <div class="p-5 rounded shadow"
        style="background-color: white; border: 1px solid lightgrey; max-width: 400px; width: 100%;">
            <h2 class="text-center fw-bold mb-4" style="color: #f8b500;">Create Your Account</h2>
            <EditForm Model="@signupModel" OnValidSubmit="@HandleSignup" FormName="SignupForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Full Name</label>
                    <InputText class="form-control" @bind-Value="signupModel.FullName" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" type="email" @bind-Value="signupModel.Email" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText class="form-control" type="password" @bind-Value="signupModel.Password" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirm Password</label>
                    <InputText class="form-control" type="password" @bind-Value="signupModel.ConfirmPassword" />
                </div>

                @* Validation text from the SignupModel *@
                @if (!string.IsNullOrWhiteSpace(signupModel.Password))
                {
                    <ul class="text-muted small mb-3 password-rules">
                        <li class="@GetValidationClass(signupModel.Password.Length >= 6)">At least 6 characters</li>
                        <li class="@GetValidationClass(signupModel.Password.Any(char.IsDigit))">Includes a number</li>
                        <li class="@GetValidationClass(signupModel.Password.Any(ch => !char.IsLetterOrDigit(ch)))">Includes a special character</li>
                    </ul>
                }

                <button class="btn btn-warning w-100 fw-bold" type="submit">Sign Up</button>


                <div class="text-center mt-3">
                    <a href="/login">Already have an account? Login</a>
                </div>

                @if (!string.IsNullOrEmpty(feedbackMessage))
                {
                    <div class="text-danger fw-bold mt-2">@feedbackMessage</div>
                }
            </EditForm>
        </div>
    </div>

    <!-- Bottom Section: Full-Width Footer -->
    <footer class="w-100">
        <Footer />
    </footer>
</div>

@code {
    private SignupModel signupModel = new();
    private string feedbackMessage;
    private string registrationError = null;

    private string GetValidationClass(bool condition) => condition ? "text-success" : "text-danger";

    // Method to handle user submission of the signup form, 
    // Sends the signup submission as JSON to the API endpoint, 
    // If succes (200 OK), user gets redirected to the login page
    private async Task HandleSignup()
    {
        feedbackMessage = null;
        var httpClient = ClientFactory.CreateClient("AuthAndUserAPI");
        var response = await httpClient.PostAsJsonAsync("api/auth/register", signupModel);

        if (response.IsSuccessStatusCode)
        {
            feedbackMessage = "✅ Account created! Redirecting to login...";
            Console.WriteLine("✅ User created");

            await Task.Delay(1500); // Give user feedback before redirect
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            feedbackMessage = "⚠️ Registration failed - please create a valid password.";
            Console.WriteLine($"❌ Signup failed: {error}");
        }
    }
}
